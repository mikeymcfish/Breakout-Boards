
seven_seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001063  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f9  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a1  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8e:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  96:	0e 94 cd 00 	call	0x19a	; 0x19a <system_init>
  9a:	08 95       	ret

0000009c <displayNumber>:
	}

}

void displayNumber(int NUM) {
	for (int i = 0; i < LOOP_COUNT; i++) {
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	48 c0       	rjmp	.+144    	; 0x132 <displayNumber+0x96>
		
		NUM & 1 << 0 ? PORTC = ENABLE | A: 1;
  a2:	80 ff       	sbrs	r24, 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <displayNumber+0xe>
  a6:	98 e0       	ldi	r25, 0x08	; 8
  a8:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e7 ec       	ldi	r30, 0xC7	; 199
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <displayNumber+0x12>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <displayNumber+0x18>
  b4:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 1 ? PORTC = ENABLE | B: 1;
  b6:	81 ff       	sbrs	r24, 1
  b8:	02 c0       	rjmp	.+4      	; 0xbe <displayNumber+0x22>
  ba:	9c e0       	ldi	r25, 0x0C	; 12
  bc:	98 b9       	out	0x08, r25	; 8
  be:	e7 ec       	ldi	r30, 0xC7	; 199
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <displayNumber+0x26>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <displayNumber+0x2c>
  c8:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 2 ? PORTC = ENABLE | C: 1;
  ca:	82 ff       	sbrs	r24, 2
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <displayNumber+0x36>
  ce:	9a e0       	ldi	r25, 0x0A	; 10
  d0:	98 b9       	out	0x08, r25	; 8
  d2:	e7 ec       	ldi	r30, 0xC7	; 199
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <displayNumber+0x3a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <displayNumber+0x40>
  dc:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 3 ? PORTC = ENABLE | D: 1;
  de:	83 ff       	sbrs	r24, 3
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <displayNumber+0x4a>
  e2:	9e e0       	ldi	r25, 0x0E	; 14
  e4:	98 b9       	out	0x08, r25	; 8
  e6:	e7 ec       	ldi	r30, 0xC7	; 199
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <displayNumber+0x4e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <displayNumber+0x54>
  f0:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 4 ? PORTC = ENABLE | E: 1;
  f2:	84 ff       	sbrs	r24, 4
  f4:	02 c0       	rjmp	.+4      	; 0xfa <displayNumber+0x5e>
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	98 b9       	out	0x08, r25	; 8
  fa:	e7 ec       	ldi	r30, 0xC7	; 199
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <displayNumber+0x62>
 102:	00 c0       	rjmp	.+0      	; 0x104 <displayNumber+0x68>
 104:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 5 ? PORTC = ENABLE | F: 1;
 106:	85 ff       	sbrs	r24, 5
 108:	02 c0       	rjmp	.+4      	; 0x10e <displayNumber+0x72>
 10a:	9d e0       	ldi	r25, 0x0D	; 13
 10c:	98 b9       	out	0x08, r25	; 8
 10e:	e7 ec       	ldi	r30, 0xC7	; 199
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <displayNumber+0x76>
 116:	00 c0       	rjmp	.+0      	; 0x118 <displayNumber+0x7c>
 118:	00 00       	nop
		_delay_us(DEL);
		NUM & 1 << 6 ? PORTC = ENABLE | G: 1;
 11a:	86 ff       	sbrs	r24, 6
 11c:	02 c0       	rjmp	.+4      	; 0x122 <displayNumber+0x86>
 11e:	9b e0       	ldi	r25, 0x0B	; 11
 120:	98 b9       	out	0x08, r25	; 8
 122:	e7 ec       	ldi	r30, 0xC7	; 199
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <displayNumber+0x8a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <displayNumber+0x90>
 12c:	00 00       	nop
	}

}

void displayNumber(int NUM) {
	for (int i = 0; i < LOOP_COUNT; i++) {
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	20 3b       	cpi	r18, 0xB0	; 176
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	3f 07       	cpc	r19, r31
 138:	0c f4       	brge	.+2      	; 0x13c <displayNumber+0xa0>
 13a:	b3 cf       	rjmp	.-154    	; 0xa2 <displayNumber+0x6>
		NUM & 1 << 5 ? PORTC = ENABLE | F: 1;
		_delay_us(DEL);
		NUM & 1 << 6 ? PORTC = ENABLE | G: 1;
		_delay_us(DEL);
	}
	PORTC = 0;
 13c:	18 b8       	out	0x08, r1	; 8
 13e:	08 95       	ret

00000140 <main>:

bool hold_display = 1;

int main(void)
{
	atmel_start_init();
 140:	0e 94 4b 00 	call	0x96	; 0x96 <atmel_start_init>

	DDRC = 0b1111;
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	87 b9       	out	0x07, r24	; 7

	while (1) {

		displayNumber(NUM0);
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM1);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM2);
 158:	8b e5       	ldi	r24, 0x5B	; 91
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM3);
 160:	8f e4       	ldi	r24, 0x4F	; 79
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM4);
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM5);
 170:	8d e6       	ldi	r24, 0x6D	; 109
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM6);
 178:	8d e7       	ldi	r24, 0x7D	; 125
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM7);
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM8);
 188:	8f e7       	ldi	r24, 0x7F	; 127
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
		displayNumber(NUM9);
 190:	8f e6       	ldi	r24, 0x6F	; 111
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 4e 00 	call	0x9c	; 0x9c <displayNumber>
 198:	d7 cf       	rjmp	.-82     	; 0x148 <main+0x8>

0000019a <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 19a:	8f ee       	ldi	r24, 0xEF	; 239
 19c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1a0:	84 b1       	in	r24, 0x04	; 4
 1a2:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1aa:	87 b1       	in	r24, 0x07	; 7
 1ac:	80 78       	andi	r24, 0x80	; 128
 1ae:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	8f 67       	ori	r24, 0x7F	; 127
 1b4:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	9b b9       	out	0x0b, r25	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	8b b9       	out	0x0b, r24	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	60 e8       	ldi	r22, 0x80	; 128
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 00 01 	call	0x200	; 0x200 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 1fa:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 1fc:	15 be       	out	0x35, r1	; 53
 1fe:	08 95       	ret

00000200 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 200:	2f b7       	in	r18, 0x3f	; 63
	cli
 202:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 204:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 206:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 208:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 20a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
